#!/usr/bin/env bash

# If the number of images in a directory is equal or larger than this value,
# this program converts them into a PDF.
: ${IMAGE_SET_SIZE_THRESOLD:=3}

# The size of output images.
# 1) If both width and height are empty, images won't be resized.
# 2) If either width or height is empty, images will be resized keeping original
#    aspect ratio.
: ${IMAGE_WIDTH:=''}
: ${IMAGE_HEIGHT:=1024}

# The quality of images. This value will be passed to ImageMagick. This is
# useful to reduce the size of output file to avoid the upload limitations on
# Google Play Books.
: ${IMAGE_QUALITY:=90%}

# The template for output PDF filenames. You can use these placeholders:
# {series_name} -> series name
# {series_no}   -> series no
: ${PDF_FILENAME_TEMPLATE:='{series_name} {series_no}.pdf'}

declare unar_available=0
declare ditto_available=0
declare unzip_available=0
declare unrar_available=0

if hash unar 2>/dev/null; then
  unar_available=1
fi
if [[ "$OSTYPE" == darwin* ]] && hash ditto 2>/dev/null; then
  ditto_available=1
fi
if hash unzip 2>/dev/null; then
  unzip_available=1
fi
if hash unrar 2>/dev/null; then
  unrar_available=1
fi

shopt -s extglob

recursively_process() {
  local target="$1"

  if is_archive "$target"; then
    recursively_process_archive "$target"
  elif [[ -d "$target" ]]; then
    recursively_process_directory "$target"
  fi
}

is_archive() {
  [[ -f "$target" && "$target" =~ \.(zip|rar|cbz)$ ]]
}

recursively_process_archive() {
  local archive="$1"

  if ! is_archive "$archive"; then
    echo "Unknown or unsupported archive type: $archive" >&2
    exit 1
  fi

  local tmp_directory
  tmp_directory="$(mktemp -d)"
  echo "Uncompressing \"${archive##*/}\" to \"${tmp_directory}\""

  # The Unarchiver can automatically detect encoding for filenames, and support
  # various archive types.
  # See https://theunarchiver.com/command-line
  if [[ "${unar_available}" == 1 ]]; then
    unar -o "$tmp_directory" -q "$archive"
  elif [[ "$archive" == *.zip ]]; then
    if [[ "${ditto_available}" ]]; then
      ditto -xk "$archive" "$tmp_directory" >/dev/null
    elif [[ "${unzip_available}" ]]; then
      unzip "$archive" -d "$tmp_directory" >/dev/null
    else
      echo 'Error: You need unar or ditto, or unzip in executable paths to' \
        'unarchive ZIP archive.' >&2
      exit 127
    fi
  elif [[ "$archive" == *.rar ]]; then
    if [[ "${unrar_available}" ]]; then
      unrar x "$archive" "$tmp_directory" >/dev/null
    else
      echo 'Error: You need unar or unrar in executable paths to unarchive' \
        'RAR archive.' >&2
      exit 127
    fi
  elif [[ "$archive" == *.cbz ]]; then
    echo 'Error: You need unar in executable paths to unarchive CBZ archive.' \
      >&2
    exit 127
  fi

  recursively_process_directory "$tmp_directory"

  rm -rf "$tmp_directory"
}

extract_series_name() {
  local file_basename="$1"

  file_basename="${file_basename%\[*\]}"
  file_basename="${file_basename%%*([ 　])}"
  file_basename="${file_basename#\(*\)}"
  file_basename="${file_basename#\[*\]}"
  file_basename="${file_basename##*([ 　])}"
  file_basename="${file_basename%[ 　]*}"
  file_basename="${file_basename%%*([ 　])}"

  echo "$file_basename"
}

extract_series_no() {
  local file_basename="$1"

  file_basename="${file_basename##*[ 　]}"
  file_basename="${file_basename//[!0-9]/}"

  echo "$file_basename"
}

pdf_filename() {
  local directory_basename="$1"

  if [[ -n "$PDF_FILENAME_TEMPLATE" ]]; then
    local series_name="$(extract_series_name "$directory_basename")"
    local series_no="$(extract_series_no "$directory_basename")"

    if [[ -n "$series_name" && -n "$series_no" ]]; then
      local filename="$PDF_FILENAME_TEMPLATE"
      filename="${filename/\{series_name\}/$series_name}"
      filename="${filename/\{series_no\}/$series_no}"
      echo "$filename"
      return 0
    fi
  fi

  echo "${directory_basename}.pdf"
}

recursively_process_directory() {
  local directory="$1"
  local -a images
  local image
  local a_directory
  local an_archive

  while IFS='' read -r image; do
    images+=("$image")
  done < <(find "$directory" \
    -mindepth 1 \
    -maxdepth 1 \
    -type f \
    \( -name '*.jpg' -o -name '*.jpeg' -o -name '*.png' \) |
    sort)

  if [[ "$IMAGE_SET_SIZE_THRESOLD" -le "${#images}" ]]; then
    local pdf_filename="$(pdf_filename "${directory##*/}")"
    echo "Converting ${#images[@]} images into \"${pdf_filename}\"."

    local magick_tmp_directory
    magick_tmp_directory="$(mktemp -d)"
    local -a convert_args=("${images[@]}" -quality "$IMAGE_QUALITY")
    if [[ -n "$IMAGE_WIDTH" || -n "$IMAGE_HEIGHT" ]]; then
      convert_args+=(-resize "${IMAGE_WIDTH}x${IMAGE_HEIGHT}")
    fi
    convert_args+=("$pdf_filename")
    MAGICK_TMPDIR="$magick_tmp_directory" convert "${convert_args[@]}"
    rm -r "$magick_tmp_directory"

    local pdf_filesize
    pdf_filesize="$(wc -c "$pdf_filename" | cut -d' ' -f2)"
    pdf_filesize="$((pdf_filesize / 1024 / 1024))"
    if [[ 100 -le "$pdf_filesize" ]]; then
      echo "Warning: \"$pdf_filename\" is over 100MB, you can't upload it on" \
        'Google Play Books.' >&2
    fi
  fi

  while IFS='' read -r a_directory; do
    recursively_process_directory "$a_directory"
  done < <(find "$directory" -mindepth 1 -maxdepth 1 -type d)

  while IFS='' read -r an_archive; do
    recursively_process_archive "$an_archive"
  done < <(find "$directory" \
    -mindepth 1 \
    -maxdepth 1 \
    -type f \
    \( -name '*.zip' -o -name '*.rar' -o -name '*.cbz' \))
}

main() {
  local -a targets=("$@")
  if [[ "${#targets[@]}" == 0 ]]; then
    targets+=("$PWD")
  fi

  for target in "${targets[@]}"; do
    recursively_process "$target"
  done
}

main "$@"
